/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Activity extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6357150375365597347L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Activity\",\"namespace\":\"model\",\"fields\":[{\"name\":\"studentCode\",\"type\":\"int\"},{\"name\":\"activity\",\"type\":\"string\"},{\"name\":\"numberOfFiles\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Activity> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Activity> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Activity> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Activity> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Activity> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Activity to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Activity from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Activity instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Activity fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int studentCode;
  private java.lang.CharSequence activity;
  private int numberOfFiles;
  private java.lang.CharSequence timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Activity() {}

  /**
   * All-args constructor.
   * @param studentCode The new value for studentCode
   * @param activity The new value for activity
   * @param numberOfFiles The new value for numberOfFiles
   * @param timestamp The new value for timestamp
   */
  public Activity(java.lang.Integer studentCode, java.lang.CharSequence activity, java.lang.Integer numberOfFiles, java.lang.CharSequence timestamp) {
    this.studentCode = studentCode;
    this.activity = activity;
    this.numberOfFiles = numberOfFiles;
    this.timestamp = timestamp;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return studentCode;
    case 1: return activity;
    case 2: return numberOfFiles;
    case 3: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: studentCode = (java.lang.Integer)value$; break;
    case 1: activity = (java.lang.CharSequence)value$; break;
    case 2: numberOfFiles = (java.lang.Integer)value$; break;
    case 3: timestamp = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'studentCode' field.
   * @return The value of the 'studentCode' field.
   */
  public int getStudentCode() {
    return studentCode;
  }


  /**
   * Sets the value of the 'studentCode' field.
   * @param value the value to set.
   */
  public void setStudentCode(int value) {
    this.studentCode = value;
  }

  /**
   * Gets the value of the 'activity' field.
   * @return The value of the 'activity' field.
   */
  public java.lang.CharSequence getActivity() {
    return activity;
  }


  /**
   * Sets the value of the 'activity' field.
   * @param value the value to set.
   */
  public void setActivity(java.lang.CharSequence value) {
    this.activity = value;
  }

  /**
   * Gets the value of the 'numberOfFiles' field.
   * @return The value of the 'numberOfFiles' field.
   */
  public int getNumberOfFiles() {
    return numberOfFiles;
  }


  /**
   * Sets the value of the 'numberOfFiles' field.
   * @param value the value to set.
   */
  public void setNumberOfFiles(int value) {
    this.numberOfFiles = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Creates a new Activity RecordBuilder.
   * @return A new Activity RecordBuilder
   */
  public static model.Activity.Builder newBuilder() {
    return new model.Activity.Builder();
  }

  /**
   * Creates a new Activity RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Activity RecordBuilder
   */
  public static model.Activity.Builder newBuilder(model.Activity.Builder other) {
    if (other == null) {
      return new model.Activity.Builder();
    } else {
      return new model.Activity.Builder(other);
    }
  }

  /**
   * Creates a new Activity RecordBuilder by copying an existing Activity instance.
   * @param other The existing instance to copy.
   * @return A new Activity RecordBuilder
   */
  public static model.Activity.Builder newBuilder(model.Activity other) {
    if (other == null) {
      return new model.Activity.Builder();
    } else {
      return new model.Activity.Builder(other);
    }
  }

  /**
   * RecordBuilder for Activity instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Activity>
    implements org.apache.avro.data.RecordBuilder<Activity> {

    private int studentCode;
    private java.lang.CharSequence activity;
    private int numberOfFiles;
    private java.lang.CharSequence timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(model.Activity.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.studentCode)) {
        this.studentCode = data().deepCopy(fields()[0].schema(), other.studentCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.activity)) {
        this.activity = data().deepCopy(fields()[1].schema(), other.activity);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.numberOfFiles)) {
        this.numberOfFiles = data().deepCopy(fields()[2].schema(), other.numberOfFiles);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Activity instance
     * @param other The existing instance to copy.
     */
    private Builder(model.Activity other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.studentCode)) {
        this.studentCode = data().deepCopy(fields()[0].schema(), other.studentCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.activity)) {
        this.activity = data().deepCopy(fields()[1].schema(), other.activity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numberOfFiles)) {
        this.numberOfFiles = data().deepCopy(fields()[2].schema(), other.numberOfFiles);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'studentCode' field.
      * @return The value.
      */
    public int getStudentCode() {
      return studentCode;
    }


    /**
      * Sets the value of the 'studentCode' field.
      * @param value The value of 'studentCode'.
      * @return This builder.
      */
    public model.Activity.Builder setStudentCode(int value) {
      validate(fields()[0], value);
      this.studentCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'studentCode' field has been set.
      * @return True if the 'studentCode' field has been set, false otherwise.
      */
    public boolean hasStudentCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'studentCode' field.
      * @return This builder.
      */
    public model.Activity.Builder clearStudentCode() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'activity' field.
      * @return The value.
      */
    public java.lang.CharSequence getActivity() {
      return activity;
    }


    /**
      * Sets the value of the 'activity' field.
      * @param value The value of 'activity'.
      * @return This builder.
      */
    public model.Activity.Builder setActivity(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.activity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'activity' field has been set.
      * @return True if the 'activity' field has been set, false otherwise.
      */
    public boolean hasActivity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'activity' field.
      * @return This builder.
      */
    public model.Activity.Builder clearActivity() {
      activity = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfFiles' field.
      * @return The value.
      */
    public int getNumberOfFiles() {
      return numberOfFiles;
    }


    /**
      * Sets the value of the 'numberOfFiles' field.
      * @param value The value of 'numberOfFiles'.
      * @return This builder.
      */
    public model.Activity.Builder setNumberOfFiles(int value) {
      validate(fields()[2], value);
      this.numberOfFiles = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfFiles' field has been set.
      * @return True if the 'numberOfFiles' field has been set, false otherwise.
      */
    public boolean hasNumberOfFiles() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'numberOfFiles' field.
      * @return This builder.
      */
    public model.Activity.Builder clearNumberOfFiles() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public model.Activity.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public model.Activity.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Activity build() {
      try {
        Activity record = new Activity();
        record.studentCode = fieldSetFlags()[0] ? this.studentCode : (java.lang.Integer) defaultValue(fields()[0]);
        record.activity = fieldSetFlags()[1] ? this.activity : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.numberOfFiles = fieldSetFlags()[2] ? this.numberOfFiles : (java.lang.Integer) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Activity>
    WRITER$ = (org.apache.avro.io.DatumWriter<Activity>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Activity>
    READER$ = (org.apache.avro.io.DatumReader<Activity>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.studentCode);

    out.writeString(this.activity);

    out.writeInt(this.numberOfFiles);

    out.writeString(this.timestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.studentCode = in.readInt();

      this.activity = in.readString(this.activity instanceof Utf8 ? (Utf8)this.activity : null);

      this.numberOfFiles = in.readInt();

      this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.studentCode = in.readInt();
          break;

        case 1:
          this.activity = in.readString(this.activity instanceof Utf8 ? (Utf8)this.activity : null);
          break;

        case 2:
          this.numberOfFiles = in.readInt();
          break;

        case 3:
          this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










